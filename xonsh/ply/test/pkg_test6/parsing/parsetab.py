
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightUMINUSDIVIDE EQUALS LPAREN MINUS NAME NUMBER PLUS RPAREN TIMESexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionstatement : NAME EQUALS expressionstatement : expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBERexpression : NAME'
    
_lr_action_items = {'MINUS':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,],[2,7,2,2,-9,-10,2,2,2,2,-7,7,-1,-2,-3,-4,-8,]),'LPAREN':([0,2,3,6,7,8,9,],[3,3,3,3,3,3,3,]),'NUMBER':([0,2,3,6,7,8,9,],[4,4,4,4,4,4,4,]),'NAME':([0,2,3,6,7,8,9,],[5,5,5,5,5,5,5,]),'$end':([1,4,5,10,12,13,14,15,16,],[0,-9,-10,-7,-1,-2,-3,-4,-8,]),'PLUS':([1,4,5,10,11,12,13,14,15,16,],[6,-9,-10,-7,6,-1,-2,-3,-4,-8,]),'TIMES':([1,4,5,10,11,12,13,14,15,16,],[8,-9,-10,-7,8,8,8,-3,-4,-8,]),'DIVIDE':([1,4,5,10,11,12,13,14,15,16,],[9,-9,-10,-7,9,9,9,-3,-4,-8,]),'RPAREN':([4,5,10,11,12,13,14,15,16,],[-9,-10,-7,16,-1,-2,-3,-4,-8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,3,6,7,8,9,],[1,10,11,12,13,14,15,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','expression.py',4),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','expression.py',5),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','expression.py',6),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','expression.py',7),
  ('statement -> NAME EQUALS expression','statement',3,'p_statement_assign','statement.py',4),
  ('statement -> expression','statement',1,'p_statement_expr','statement.py',8),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','expression.py',14),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','expression.py',18),
  ('expression -> NUMBER','expression',1,'p_expression_number','expression.py',22),
  ('expression -> NAME','expression',1,'p_expression_name','expression.py',26),
]
